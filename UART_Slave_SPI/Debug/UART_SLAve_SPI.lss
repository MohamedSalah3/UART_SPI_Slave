
UART_SLAve_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000154e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000154e  000015e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800070  00800070  000015f2  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00003748  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002002  00000000  00000000  000038c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  000058ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d6  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc4  00000000  00000000  000068a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000105f  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dd3  00000000  00000000  000084c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_1>
       8:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_2>
       c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_3>
      10:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_4>
      14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_5>
      18:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_6>
      1c:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_7>
      20:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_8>
      24:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_9>
      28:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_10>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_11>
      30:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_12>
      34:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_13>
      38:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_14>
      3c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_15>
      40:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_16>
      44:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_17>
      48:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_18>
      4c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_19>
      50:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 04 	call	0x9ca	; 0x9ca <main>
      8a:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPortDirection>:
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	49 f0       	breq	.+18     	; 0xa8 <gpioPortDirection+0x16>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	28 f0       	brcs	.+10     	; 0xa4 <gpioPortDirection+0x12>
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	39 f0       	breq	.+14     	; 0xac <gpioPortDirection+0x1a>
      9e:	83 30       	cpi	r24, 0x03	; 3
      a0:	41 f4       	brne	.+16     	; 0xb2 <gpioPortDirection+0x20>
      a2:	06 c0       	rjmp	.+12     	; 0xb0 <gpioPortDirection+0x1e>
      a4:	6a bb       	out	0x1a, r22	; 26
      a6:	08 95       	ret
      a8:	67 bb       	out	0x17, r22	; 23
      aa:	08 95       	ret
      ac:	64 bb       	out	0x14, r22	; 20
      ae:	08 95       	ret
      b0:	61 bb       	out	0x11, r22	; 17
      b2:	08 95       	ret

000000b4 <gpioPortWrite>:
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	49 f0       	breq	.+18     	; 0xca <gpioPortWrite+0x16>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	28 f0       	brcs	.+10     	; 0xc6 <gpioPortWrite+0x12>
      bc:	82 30       	cpi	r24, 0x02	; 2
      be:	39 f0       	breq	.+14     	; 0xce <gpioPortWrite+0x1a>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	41 f4       	brne	.+16     	; 0xd4 <gpioPortWrite+0x20>
      c4:	06 c0       	rjmp	.+12     	; 0xd2 <gpioPortWrite+0x1e>
      c6:	6b bb       	out	0x1b, r22	; 27
      c8:	08 95       	ret
      ca:	68 bb       	out	0x18, r22	; 24
      cc:	08 95       	ret
      ce:	65 bb       	out	0x15, r22	; 21
      d0:	08 95       	ret
      d2:	62 bb       	out	0x12, r22	; 18
      d4:	08 95       	ret

000000d6 <gpioPortToggle>:
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	59 f0       	breq	.+22     	; 0xf0 <gpioPortToggle+0x1a>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	28 f0       	brcs	.+10     	; 0xe8 <gpioPortToggle+0x12>
      de:	82 30       	cpi	r24, 0x02	; 2
      e0:	59 f0       	breq	.+22     	; 0xf8 <gpioPortToggle+0x22>
      e2:	83 30       	cpi	r24, 0x03	; 3
      e4:	81 f4       	brne	.+32     	; 0x106 <gpioPortToggle+0x30>
      e6:	0c c0       	rjmp	.+24     	; 0x100 <gpioPortToggle+0x2a>
      e8:	8b b3       	in	r24, 0x1b	; 27
      ea:	80 95       	com	r24
      ec:	8b bb       	out	0x1b, r24	; 27
      ee:	08 95       	ret
      f0:	88 b3       	in	r24, 0x18	; 24
      f2:	80 95       	com	r24
      f4:	88 bb       	out	0x18, r24	; 24
      f6:	08 95       	ret
      f8:	85 b3       	in	r24, 0x15	; 21
      fa:	80 95       	com	r24
      fc:	85 bb       	out	0x15, r24	; 21
      fe:	08 95       	ret
     100:	82 b3       	in	r24, 0x12	; 18
     102:	80 95       	com	r24
     104:	82 bb       	out	0x12, r24	; 18
     106:	08 95       	ret

00000108 <gpioPortRead>:
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	49 f0       	breq	.+18     	; 0x11e <gpioPortRead+0x16>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	28 f0       	brcs	.+10     	; 0x11a <gpioPortRead+0x12>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	39 f0       	breq	.+14     	; 0x122 <gpioPortRead+0x1a>
     114:	83 30       	cpi	r24, 0x03	; 3
     116:	49 f4       	brne	.+18     	; 0x12a <gpioPortRead+0x22>
     118:	06 c0       	rjmp	.+12     	; 0x126 <gpioPortRead+0x1e>
     11a:	8b b3       	in	r24, 0x1b	; 27
     11c:	08 95       	ret
     11e:	88 b3       	in	r24, 0x18	; 24
     120:	08 95       	ret
     122:	85 b3       	in	r24, 0x15	; 21
     124:	08 95       	ret
     126:	82 b3       	in	r24, 0x12	; 18
     128:	08 95       	ret
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret

0000012e <gpioPinDirection>:
     12e:	44 23       	and	r20, r20
     130:	19 f0       	breq	.+6      	; 0x138 <gpioPinDirection+0xa>
     132:	4f 3f       	cpi	r20, 0xFF	; 255
     134:	d1 f5       	brne	.+116    	; 0x1aa <gpioPinDirection+0x7c>
     136:	21 c0       	rjmp	.+66     	; 0x17a <gpioPinDirection+0x4c>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	69 f0       	breq	.+26     	; 0x156 <gpioPinDirection+0x28>
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	28 f0       	brcs	.+10     	; 0x14a <gpioPinDirection+0x1c>
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	79 f0       	breq	.+30     	; 0x162 <gpioPinDirection+0x34>
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	c9 f4       	brne	.+50     	; 0x17a <gpioPinDirection+0x4c>
     148:	12 c0       	rjmp	.+36     	; 0x16e <gpioPinDirection+0x40>
     14a:	8a b3       	in	r24, 0x1a	; 26
     14c:	96 2f       	mov	r25, r22
     14e:	90 95       	com	r25
     150:	89 23       	and	r24, r25
     152:	8a bb       	out	0x1a, r24	; 26
     154:	1b c0       	rjmp	.+54     	; 0x18c <gpioPinDirection+0x5e>
     156:	87 b3       	in	r24, 0x17	; 23
     158:	96 2f       	mov	r25, r22
     15a:	90 95       	com	r25
     15c:	89 23       	and	r24, r25
     15e:	87 bb       	out	0x17, r24	; 23
     160:	19 c0       	rjmp	.+50     	; 0x194 <gpioPinDirection+0x66>
     162:	84 b3       	in	r24, 0x14	; 20
     164:	96 2f       	mov	r25, r22
     166:	90 95       	com	r25
     168:	89 23       	and	r24, r25
     16a:	84 bb       	out	0x14, r24	; 20
     16c:	17 c0       	rjmp	.+46     	; 0x19c <gpioPinDirection+0x6e>
     16e:	81 b3       	in	r24, 0x11	; 17
     170:	96 2f       	mov	r25, r22
     172:	90 95       	com	r25
     174:	89 23       	and	r24, r25
     176:	81 bb       	out	0x11, r24	; 17
     178:	15 c0       	rjmp	.+42     	; 0x1a4 <gpioPinDirection+0x76>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	59 f0       	breq	.+22     	; 0x194 <gpioPinDirection+0x66>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	28 f0       	brcs	.+10     	; 0x18c <gpioPinDirection+0x5e>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	59 f0       	breq	.+22     	; 0x19c <gpioPinDirection+0x6e>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	81 f4       	brne	.+32     	; 0x1aa <gpioPinDirection+0x7c>
     18a:	0c c0       	rjmp	.+24     	; 0x1a4 <gpioPinDirection+0x76>
     18c:	8a b3       	in	r24, 0x1a	; 26
     18e:	68 2b       	or	r22, r24
     190:	6a bb       	out	0x1a, r22	; 26
     192:	08 95       	ret
     194:	87 b3       	in	r24, 0x17	; 23
     196:	68 2b       	or	r22, r24
     198:	67 bb       	out	0x17, r22	; 23
     19a:	08 95       	ret
     19c:	84 b3       	in	r24, 0x14	; 20
     19e:	68 2b       	or	r22, r24
     1a0:	64 bb       	out	0x14, r22	; 20
     1a2:	08 95       	ret
     1a4:	81 b3       	in	r24, 0x11	; 17
     1a6:	68 2b       	or	r22, r24
     1a8:	61 bb       	out	0x11, r22	; 17
     1aa:	08 95       	ret

000001ac <gpioPinWrite>:
     1ac:	44 23       	and	r20, r20
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <gpioPinWrite+0xa>
     1b0:	4f 3f       	cpi	r20, 0xFF	; 255
     1b2:	b1 f5       	brne	.+108    	; 0x220 <gpioPinWrite+0x74>
     1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <gpioPinWrite+0x44>
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	61 f0       	breq	.+24     	; 0x1d2 <gpioPinWrite+0x26>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	28 f0       	brcs	.+10     	; 0x1c8 <gpioPinWrite+0x1c>
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	69 f0       	breq	.+26     	; 0x1dc <gpioPinWrite+0x30>
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	69 f5       	brne	.+90     	; 0x220 <gpioPinWrite+0x74>
     1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <gpioPinWrite+0x3a>
     1c8:	8b b3       	in	r24, 0x1b	; 27
     1ca:	60 95       	com	r22
     1cc:	68 23       	and	r22, r24
     1ce:	6b bb       	out	0x1b, r22	; 27
     1d0:	08 95       	ret
     1d2:	88 b3       	in	r24, 0x18	; 24
     1d4:	60 95       	com	r22
     1d6:	68 23       	and	r22, r24
     1d8:	68 bb       	out	0x18, r22	; 24
     1da:	08 95       	ret
     1dc:	85 b3       	in	r24, 0x15	; 21
     1de:	60 95       	com	r22
     1e0:	68 23       	and	r22, r24
     1e2:	65 bb       	out	0x15, r22	; 21
     1e4:	08 95       	ret
     1e6:	82 b3       	in	r24, 0x12	; 18
     1e8:	60 95       	com	r22
     1ea:	68 23       	and	r22, r24
     1ec:	62 bb       	out	0x12, r22	; 18
     1ee:	08 95       	ret
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinWrite+0x5e>
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	28 f0       	brcs	.+10     	; 0x202 <gpioPinWrite+0x56>
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	59 f0       	breq	.+22     	; 0x212 <gpioPinWrite+0x66>
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	81 f4       	brne	.+32     	; 0x220 <gpioPinWrite+0x74>
     200:	0c c0       	rjmp	.+24     	; 0x21a <gpioPinWrite+0x6e>
     202:	8b b3       	in	r24, 0x1b	; 27
     204:	68 2b       	or	r22, r24
     206:	6b bb       	out	0x1b, r22	; 27
     208:	08 95       	ret
     20a:	88 b3       	in	r24, 0x18	; 24
     20c:	68 2b       	or	r22, r24
     20e:	68 bb       	out	0x18, r22	; 24
     210:	08 95       	ret
     212:	85 b3       	in	r24, 0x15	; 21
     214:	68 2b       	or	r22, r24
     216:	65 bb       	out	0x15, r22	; 21
     218:	08 95       	ret
     21a:	82 b3       	in	r24, 0x12	; 18
     21c:	68 2b       	or	r22, r24
     21e:	62 bb       	out	0x12, r22	; 18
     220:	08 95       	ret

00000222 <gpioPinToggle>:
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	59 f0       	breq	.+22     	; 0x23c <gpioPinToggle+0x1a>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	28 f0       	brcs	.+10     	; 0x234 <gpioPinToggle+0x12>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	59 f0       	breq	.+22     	; 0x244 <gpioPinToggle+0x22>
     22e:	83 30       	cpi	r24, 0x03	; 3
     230:	81 f4       	brne	.+32     	; 0x252 <gpioPinToggle+0x30>
     232:	0c c0       	rjmp	.+24     	; 0x24c <gpioPinToggle+0x2a>
     234:	8b b3       	in	r24, 0x1b	; 27
     236:	68 27       	eor	r22, r24
     238:	6b bb       	out	0x1b, r22	; 27
     23a:	08 95       	ret
     23c:	88 b3       	in	r24, 0x18	; 24
     23e:	68 27       	eor	r22, r24
     240:	68 bb       	out	0x18, r22	; 24
     242:	08 95       	ret
     244:	85 b3       	in	r24, 0x15	; 21
     246:	68 27       	eor	r22, r24
     248:	65 bb       	out	0x15, r22	; 21
     24a:	08 95       	ret
     24c:	82 b3       	in	r24, 0x12	; 18
     24e:	68 27       	eor	r22, r24
     250:	62 bb       	out	0x12, r22	; 18
     252:	08 95       	ret

00000254 <gpioPinRead>:
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	51 f0       	breq	.+20     	; 0x26c <gpioPinRead+0x18>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	28 f0       	brcs	.+10     	; 0x266 <gpioPinRead+0x12>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	49 f0       	breq	.+18     	; 0x272 <gpioPinRead+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	69 f4       	brne	.+26     	; 0x27e <gpioPinRead+0x2a>
     264:	09 c0       	rjmp	.+18     	; 0x278 <gpioPinRead+0x24>
     266:	89 b3       	in	r24, 0x19	; 25
     268:	68 23       	and	r22, r24
     26a:	0a c0       	rjmp	.+20     	; 0x280 <gpioPinRead+0x2c>
     26c:	86 b3       	in	r24, 0x16	; 22
     26e:	68 23       	and	r22, r24
     270:	07 c0       	rjmp	.+14     	; 0x280 <gpioPinRead+0x2c>
     272:	83 b3       	in	r24, 0x13	; 19
     274:	68 23       	and	r22, r24
     276:	04 c0       	rjmp	.+8      	; 0x280 <gpioPinRead+0x2c>
     278:	80 b3       	in	r24, 0x10	; 16
     27a:	68 23       	and	r22, r24
     27c:	01 c0       	rjmp	.+2      	; 0x280 <gpioPinRead+0x2c>
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	66 23       	and	r22, r22
     284:	09 f4       	brne	.+2      	; 0x288 <gpioPinRead+0x34>
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	08 95       	ret

0000028a <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     28a:	8f b7       	in	r24, 0x3f	; 63
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	8f bf       	out	0x3f, r24	; 63
}
     290:	08 95       	ret

00000292 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
SET_BIT(GICR,INT2);
     29c:	8b b7       	in	r24, 0x3b	; 59
     29e:	80 62       	ori	r24, 0x20	; 32
     2a0:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     2a2:	84 b7       	in	r24, 0x34	; 52
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	84 bf       	out	0x34, r24	; 52
}
     2a8:	08 95       	ret

000002aa <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2aa:	8f b7       	in	r24, 0x3f	; 63
     2ac:	8f 77       	andi	r24, 0x7F	; 127
     2ae:	8f bf       	out	0x3f, r24	; 63
}
     2b0:	08 95       	ret

000002b2 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	2f 93       	push	r18
     2be:	3f 93       	push	r19
     2c0:	4f 93       	push	r20
     2c2:	5f 93       	push	r21
     2c4:	6f 93       	push	r22
     2c6:	7f 93       	push	r23
     2c8:	8f 93       	push	r24
     2ca:	9f 93       	push	r25
     2cc:	af 93       	push	r26
     2ce:	bf 93       	push	r27
     2d0:	ef 93       	push	r30
     2d2:	ff 93       	push	r31
  INT0_external_interrupt();
     2d4:	e0 91 8c 00 	lds	r30, 0x008C
     2d8:	f0 91 8d 00 	lds	r31, 0x008D
     2dc:	09 95       	icall
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	2f 93       	push	r18
     30c:	3f 93       	push	r19
     30e:	4f 93       	push	r20
     310:	5f 93       	push	r21
     312:	6f 93       	push	r22
     314:	7f 93       	push	r23
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	af 93       	push	r26
     31c:	bf 93       	push	r27
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
  INT1_external_interrupt();
     322:	e0 91 92 00 	lds	r30, 0x0092
     326:	f0 91 93 00 	lds	r31, 0x0093
     32a:	09 95       	icall
}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	2f 93       	push	r18
     35a:	3f 93       	push	r19
     35c:	4f 93       	push	r20
     35e:	5f 93       	push	r21
     360:	6f 93       	push	r22
     362:	7f 93       	push	r23
     364:	8f 93       	push	r24
     366:	9f 93       	push	r25
     368:	af 93       	push	r26
     36a:	bf 93       	push	r27
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
  INT2_external_interrupt();
     370:	e0 91 82 00 	lds	r30, 0x0082
     374:	f0 91 83 00 	lds	r31, 0x0083
     378:	09 95       	icall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
TIMER2COMP();
     3be:	e0 91 66 00 	lds	r30, 0x0066
     3c2:	f0 91 67 00 	lds	r31, 0x0067
     3c6:	09 95       	icall
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
  TIMER2OVF();
     40c:	e0 91 64 00 	lds	r30, 0x0064
     410:	f0 91 65 00 	lds	r31, 0x0065
     414:	09 95       	icall
}
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	2f 93       	push	r18
     444:	3f 93       	push	r19
     446:	4f 93       	push	r20
     448:	5f 93       	push	r21
     44a:	6f 93       	push	r22
     44c:	7f 93       	push	r23
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
     456:	ef 93       	push	r30
     458:	ff 93       	push	r31
  TIMER1CAPT();
     45a:	e0 91 94 00 	lds	r30, 0x0094
     45e:	f0 91 95 00 	lds	r31, 0x0095
     462:	09 95       	icall
}
     464:	ff 91       	pop	r31
     466:	ef 91       	pop	r30
     468:	bf 91       	pop	r27
     46a:	af 91       	pop	r26
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	7f 91       	pop	r23
     472:	6f 91       	pop	r22
     474:	5f 91       	pop	r21
     476:	4f 91       	pop	r20
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
TIMER1COMPA();
     4a8:	e0 91 7e 00 	lds	r30, 0x007E
     4ac:	f0 91 7f 00 	lds	r31, 0x007F
     4b0:	09 95       	icall
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
  TIMER1COMPB();
     4f6:	e0 91 7c 00 	lds	r30, 0x007C
     4fa:	f0 91 7d 00 	lds	r31, 0x007D
     4fe:	09 95       	icall
}
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
  TIMER1OVF();
     544:	e0 91 96 00 	lds	r30, 0x0096
     548:	f0 91 97 00 	lds	r31, 0x0097
     54c:	09 95       	icall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31

  TIMER0COMP();
     592:	e0 91 62 00 	lds	r30, 0x0062
     596:	f0 91 63 00 	lds	r31, 0x0063
     59a:	09 95       	icall
}
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	bf 91       	pop	r27
     5a2:	af 91       	pop	r26
     5a4:	9f 91       	pop	r25
     5a6:	8f 91       	pop	r24
     5a8:	7f 91       	pop	r23
     5aa:	6f 91       	pop	r22
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31

  TIMER0OVF_INT();
     5e0:	e0 91 84 00 	lds	r30, 0x0084
     5e4:	f0 91 85 00 	lds	r31, 0x0085
     5e8:	09 95       	icall
}
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
  SPI_STC();
     62e:	e0 91 80 00 	lds	r30, 0x0080
     632:	f0 91 81 00 	lds	r31, 0x0081
     636:	09 95       	icall
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
  USART_RXC();
     67c:	e0 91 60 00 	lds	r30, 0x0060
     680:	f0 91 61 00 	lds	r31, 0x0061
     684:	09 95       	icall
}
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
  USART_UDRE();
     6ca:	e0 91 90 00 	lds	r30, 0x0090
     6ce:	f0 91 91 00 	lds	r31, 0x0091
     6d2:	09 95       	icall
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
  USART_TXC();
     718:	e0 91 8e 00 	lds	r30, 0x008E
     71c:	f0 91 8f 00 	lds	r31, 0x008F
     720:	09 95       	icall
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	0f 92       	push	r0
     74c:	11 24       	eor	r1, r1
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
  ADC_INT();
     766:	e0 91 88 00 	lds	r30, 0x0088
     76a:	f0 91 89 00 	lds	r31, 0x0089
     76e:	09 95       	icall
}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
  EE_RDY();
     7b4:	e0 91 8a 00 	lds	r30, 0x008A
     7b8:	f0 91 8b 00 	lds	r31, 0x008B
     7bc:	09 95       	icall
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
  ANA_COMP();
     802:	e0 91 86 00 	lds	r30, 0x0086
     806:	f0 91 87 00 	lds	r31, 0x0087
     80a:	09 95       	icall
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
  TWI_I2C();
     850:	e0 91 78 00 	lds	r30, 0x0078
     854:	f0 91 79 00 	lds	r31, 0x0079
     858:	09 95       	icall
}
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
  SPM_RDY();
     89e:	e0 91 7a 00 	lds	r30, 0x007A
     8a2:	f0 91 7b 00 	lds	r31, 0x007B
     8a6:	09 95       	icall
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <Led_Init>:
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <Led_Init+0x1e>
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <Led_Init+0x12>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	79 f0       	breq	.+30     	; 0x8f4 <Led_Init+0x2a>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	c1 f4       	brne	.+48     	; 0x90a <Led_Init+0x40>
     8da:	12 c0       	rjmp	.+36     	; 0x900 <Led_Init+0x36>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	60 e1       	ldi	r22, 0x10	; 16
     8e0:	4f ef       	ldi	r20, 0xFF	; 255
     8e2:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     8e6:	08 95       	ret
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	60 e2       	ldi	r22, 0x20	; 32
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     8f2:	08 95       	ret
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	60 e4       	ldi	r22, 0x40	; 64
     8f8:	4f ef       	ldi	r20, 0xFF	; 255
     8fa:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     8fe:	08 95       	ret
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	60 e8       	ldi	r22, 0x80	; 128
     904:	4f ef       	ldi	r20, 0xFF	; 255
     906:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     90a:	08 95       	ret

0000090c <Led_On>:
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	69 f0       	breq	.+26     	; 0x92a <Led_On+0x1e>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	28 f0       	brcs	.+10     	; 0x91e <Led_On+0x12>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	79 f0       	breq	.+30     	; 0x936 <Led_On+0x2a>
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	c1 f4       	brne	.+48     	; 0x94c <Led_On+0x40>
     91c:	12 c0       	rjmp	.+36     	; 0x942 <Led_On+0x36>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	60 e1       	ldi	r22, 0x10	; 16
     922:	4f ef       	ldi	r20, 0xFF	; 255
     924:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     928:	08 95       	ret
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	60 e2       	ldi	r22, 0x20	; 32
     92e:	4f ef       	ldi	r20, 0xFF	; 255
     930:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     934:	08 95       	ret
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	60 e4       	ldi	r22, 0x40	; 64
     93a:	4f ef       	ldi	r20, 0xFF	; 255
     93c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     940:	08 95       	ret
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	60 e8       	ldi	r22, 0x80	; 128
     946:	4f ef       	ldi	r20, 0xFF	; 255
     948:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     94c:	08 95       	ret

0000094e <Led_Off>:
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	69 f0       	breq	.+26     	; 0x96c <Led_Off+0x1e>
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	28 f0       	brcs	.+10     	; 0x960 <Led_Off+0x12>
     956:	82 30       	cpi	r24, 0x02	; 2
     958:	79 f0       	breq	.+30     	; 0x978 <Led_Off+0x2a>
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	c1 f4       	brne	.+48     	; 0x98e <Led_Off+0x40>
     95e:	12 c0       	rjmp	.+36     	; 0x984 <Led_Off+0x36>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	60 e1       	ldi	r22, 0x10	; 16
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     96a:	08 95       	ret
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	60 e2       	ldi	r22, 0x20	; 32
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     976:	08 95       	ret
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	60 e4       	ldi	r22, 0x40	; 64
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     982:	08 95       	ret
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	60 e8       	ldi	r22, 0x80	; 128
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     98e:	08 95       	ret

00000990 <Led_Toggle>:
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	61 f0       	breq	.+24     	; 0x9ac <Led_Toggle+0x1c>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	28 f0       	brcs	.+10     	; 0x9a2 <Led_Toggle+0x12>
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	69 f0       	breq	.+26     	; 0x9b6 <Led_Toggle+0x26>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	a1 f4       	brne	.+40     	; 0x9c8 <Led_Toggle+0x38>
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <Led_Toggle+0x30>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	60 e1       	ldi	r22, 0x10	; 16
     9a6:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
     9aa:	08 95       	ret
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	60 e2       	ldi	r22, 0x20	; 32
     9b0:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
     9b4:	08 95       	ret
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	60 e4       	ldi	r22, 0x40	; 64
     9ba:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
     9be:	08 95       	ret
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	60 e8       	ldi	r22, 0x80	; 128
     9c4:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
     9c8:	08 95       	ret

000009ca <main>:
#include "SPI_Config.h"
int main(void)
{
	uint8_t data_sent='A';
	uint8_t flag=0;
	pushButtonInit(BTN_0);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <pushButtonInit>
	pushButtonInit(BTN_1);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <pushButtonInit>
	gpioPinDirection(GPIOB,BIT3,OUTPUT);
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	68 e0       	ldi	r22, 0x08	; 8
     9da:	4f ef       	ldi	r20, 0xFF	; 255
     9dc:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
	Led_Init(LED_0);
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 65 04 	call	0x8ca	; 0x8ca <Led_Init>
	Led_Init(LED_1);
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 65 04 	call	0x8ca	; 0x8ca <Led_Init>
	timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_NO,0,0,0,T2_POLLING);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	ee 24       	eor	r14, r14
     9f8:	cc 24       	eor	r12, r12
     9fa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <timer2Init>
	Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
     9fe:	87 e6       	ldi	r24, 0x67	; 103
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	23 e0       	ldi	r18, 0x03	; 3
     a06:	0e 94 b6 08 	call	0x116c	; 0x116c <Uart_Init>
	Led_On(LED_0);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 86 04 	call	0x90c	; 0x90c <Led_On>
	Led_On(LED_1);
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 86 04 	call	0x90c	; 0x90c <Led_On>
    SPI_Init();
     a16:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SPI_Init>
#include "SPI.h"
#include "SPI_Config.h"
int main(void)
{
	uint8_t data_sent='A';
	uint8_t flag=0;
     a1a:	c0 e0       	ldi	r28, 0x00	; 0
#include "uartconfig.h"
#include "SPI.h"
#include "SPI_Config.h"
int main(void)
{
	uint8_t data_sent='A';
     a1c:	d1 e4       	ldi	r29, 0x41	; 65
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <main+0x62>
	Led_On(LED_1);
    SPI_Init();
	while(1)
		{
				while(flag == 1){
			data_sent =SPI_Receive();
     a20:	0e 94 f7 05 	call	0xbee	; 0xbee <SPI_Receive>
			UartTransmitPooling((data_sent++));
     a24:	d8 2f       	mov	r29, r24
     a26:	df 5f       	subi	r29, 0xFF	; 255
     a28:	0e 94 10 09 	call	0x1220	; 0x1220 <UartTransmitPooling>
	Led_On(LED_0);
	Led_On(LED_1);
    SPI_Init();
	while(1)
		{
				while(flag == 1){
     a2c:	c1 30       	cpi	r28, 0x01	; 1
     a2e:	c1 f3       	breq	.-16     	; 0xa20 <main+0x56>
			data_sent =SPI_Receive();
			UartTransmitPooling((data_sent++));
									}			
			if (pushButtonGetStatus(BTN_0))
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 4f 05 	call	0xa9e	; 0xa9e <pushButtonGetStatus>
     a36:	81 11       	cpse	r24, r1
				{
						flag=1;
     a38:	c1 e0       	ldi	r28, 0x01	; 1
				}
				if (pushButtonGetStatus(BTN_1))
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <pushButtonGetStatus>
     a40:	88 23       	and	r24, r24
     a42:	29 f0       	breq	.+10     	; 0xa4e <main+0x84>
				{
					flag=0;
				UartTransmitPooling(data_sent+'0');			
     a44:	8d 2f       	mov	r24, r29
     a46:	80 5d       	subi	r24, 0xD0	; 208
     a48:	0e 94 10 09 	call	0x1220	; 0x1220 <UartTransmitPooling>
				{
						flag=1;
				}
				if (pushButtonGetStatus(BTN_1))
				{
					flag=0;
     a4c:	c0 e0       	ldi	r28, 0x00	; 0
				}
				/*
				data_sent =SPI_Receive();
			UartTransmitPooling(data_sent);
		*/
				timer2Start();
     a4e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <timer2Start>
				timer2DelayMs(1000);
     a52:	88 ee       	ldi	r24, 0xE8	; 232
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	0e 94 ab 07 	call	0xf56	; 0xf56 <timer2DelayMs>

    }
     a5a:	e8 cf       	rjmp	.-48     	; 0xa2c <main+0x62>

00000a5c <pushButtonInit>:
	BTN_3
*/
void pushButtonInit(En_buttonId_t en_butotn_id)
{
	
switch(en_butotn_id)
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	69 f0       	breq	.+26     	; 0xa7a <pushButtonInit+0x1e>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	28 f0       	brcs	.+10     	; 0xa6e <pushButtonInit+0x12>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	79 f0       	breq	.+30     	; 0xa86 <pushButtonInit+0x2a>
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	c1 f4       	brne	.+48     	; 0xa9c <pushButtonInit+0x40>
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <pushButtonInit+0x36>
{
case BTN_0:
{
gpioPinDirection(BTN_0_GPIO,BTN_0_BIT,LOW);
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	60 e1       	ldi	r22, 0x10	; 16
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     a78:	08 95       	ret
}
case BTN_1:
{
gpioPinDirection(BTN_1_GPIO,BTN_1_BIT,LOW);
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     a84:	08 95       	ret
}
case BTN_2:
{
gpioPinDirection(BTN_2_GPIO,BTN_2_BIT,LOW);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	64 e0       	ldi	r22, 0x04	; 4
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     a90:	08 95       	ret
}
case BTN_3:
{
gpioPinDirection(BTN_3_GPIO,BTN_3_BIT,LOW);
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	68 e0       	ldi	r22, 0x08	; 8
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     a9c:	08 95       	ret

00000a9e <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	
switch(en_butotn_id)
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	f9 f0       	breq	.+62     	; 0xae0 <pushButtonGetStatus+0x42>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	30 f0       	brcs	.+12     	; 0xab2 <pushButtonGetStatus+0x14>
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	81 f1       	breq	.+96     	; 0xb0a <pushButtonGetStatus+0x6c>
     aaa:	83 30       	cpi	r24, 0x03	; 3
     aac:	09 f0       	breq	.+2      	; 0xab0 <pushButtonGetStatus+0x12>
     aae:	57 c0       	rjmp	.+174    	; 0xb5e <pushButtonGetStatus+0xc0>
     ab0:	41 c0       	rjmp	.+130    	; 0xb34 <pushButtonGetStatus+0x96>
{
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	60 e1       	ldi	r22, 0x10	; 16
     ab6:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	09 f0       	breq	.+2      	; 0xac0 <pushButtonGetStatus+0x22>
     abe:	50 c0       	rjmp	.+160    	; 0xb60 <pushButtonGetStatus+0xc2>
{ softwareDelayMs(10);
     ac0:	6a e0       	ldi	r22, 0x0A	; 10
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 b9 05 	call	0xb72	; 0xb72 <softwareDelayMs>
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	60 e1       	ldi	r22, 0x10	; 16
     ad0:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
	return Pressed;
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	09 f4       	brne	.+2      	; 0xadc <pushButtonGetStatus+0x3e>
     ada:	49 c0       	rjmp	.+146    	; 0xb6e <pushButtonGetStatus+0xd0>
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	47 c0       	rjmp	.+142    	; 0xb6e <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_1:
{
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	e1 f5       	brne	.+120    	; 0xb64 <pushButtonGetStatus+0xc6>
{
softwareDelayMs(10);
     aec:	6a e0       	ldi	r22, 0x0A	; 10
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 b9 05 	call	0xb72	; 0xb72 <softwareDelayMs>
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	64 e0       	ldi	r22, 0x04	; 4
     afc:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ softwareDelayMs(10);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	a1 f1       	breq	.+104    	; 0xb6e <pushButtonGetStatus+0xd0>
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	32 c0       	rjmp	.+100    	; 0xb6e <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_2:
{
if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	64 e0       	ldi	r22, 0x04	; 4
     b0e:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	49 f5       	brne	.+82     	; 0xb68 <pushButtonGetStatus+0xca>
{
	softwareDelayMs(10);
     b16:	6a e0       	ldi	r22, 0x0A	; 10
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 b9 05 	call	0xb72	; 0xb72 <softwareDelayMs>
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	64 e0       	ldi	r22, 0x04	; 4
     b26:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ softwareDelayMs(10);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	f9 f0       	breq	.+62     	; 0xb6e <pushButtonGetStatus+0xd0>
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	1d c0       	rjmp	.+58     	; 0xb6e <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_3:
{
if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	68 e0       	ldi	r22, 0x08	; 8
     b38:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	b1 f4       	brne	.+44     	; 0xb6c <pushButtonGetStatus+0xce>
{
	softwareDelayMs(10);
     b40:	6a e0       	ldi	r22, 0x0A	; 10
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 b9 05 	call	0xb72	; 0xb72 <softwareDelayMs>
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	68 e0       	ldi	r22, 0x08	; 8
     b50:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ softwareDelayMs(10);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	51 f0       	breq	.+20     	; 0xb6e <pushButtonGetStatus+0xd0>
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <pushButtonGetStatus+0xd0>
     b5e:	08 95       	ret
	else {return Released;}
}else{return Released;}
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <pushButtonGetStatus+0xd0>
{
softwareDelayMs(10);
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
return Pressed;
	else {return Released;}
}else{return Released;}
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <pushButtonGetStatus+0xd0>
{
	softwareDelayMs(10);
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <pushButtonGetStatus+0xd0>
{
	softwareDelayMs(10);
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     b6c:	90 e0       	ldi	r25, 0x00	; 0
break;		
}

}
     b6e:	89 2f       	mov	r24, r25
     b70:	08 95       	ret

00000b72 <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
     b72:	ab 01       	movw	r20, r22
     b74:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
     b76:	41 15       	cp	r20, r1
     b78:	51 05       	cpc	r21, r1
     b7a:	61 05       	cpc	r22, r1
     b7c:	71 05       	cpc	r23, r1
     b7e:	59 f4       	brne	.+22     	; 0xb96 <softwareDelayMs+0x24>
     b80:	08 95       	ret
     b82:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<150;Local_Nope_counter++);
     b84:	86 39       	cpi	r24, 0x96	; 150
     b86:	91 05       	cpc	r25, r1
     b88:	e1 f7       	brne	.-8      	; 0xb82 <softwareDelayMs+0x10>

u32_delay_in_ms--;	
     b8a:	41 50       	subi	r20, 0x01	; 1
     b8c:	50 40       	sbci	r21, 0x00	; 0
     b8e:	60 40       	sbci	r22, 0x00	; 0
     b90:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
     b92:	19 f4       	brne	.+6      	; 0xb9a <softwareDelayMs+0x28>
     b94:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	c9 01       	movw	r24, r18
     b9c:	f2 cf       	rjmp	.-28     	; 0xb82 <softwareDelayMs+0x10>

00000b9e <SPI_Init>:
extern ST_SPI_Configuration SPI_Config ;
/*
static void (*SPI_ISR)(void);
*/
void SPI_Init()
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
	 ST_SPI_Configuration *gConfig = & SPI_Config;
		
	/********************Enable SPI Interrupt ******************/
		
	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR =   gConfig->MASTER_SLAVE_MODE | gConfig->DATA_ORDER 
     ba2:	c8 e6       	ldi	r28, 0x68	; 104
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
     ba6:	90 91 6e 00 	lds	r25, 0x006E
     baa:	88 81       	ld	r24, Y
     bac:	89 2b       	or	r24, r25
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	89 2b       	or	r24, r25
     bb2:	99 81       	ldd	r25, Y+1	; 0x01
     bb4:	89 2b       	or	r24, r25
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	89 2b       	or	r24, r25
     bba:	8d b9       	out	0x0d, r24	; 13
			  | gConfig->OPERATING_LEVEL | gConfig->PRESCALAR 
			 | gConfig->SAMPLING_EDGE;
			 
	SPSR |=  gConfig->DOUBLE_SPEED;
     bbc:	9e b1       	in	r25, 0x0e	; 14
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	89 2b       	or	r24, r25
     bc2:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	60 eb       	ldi	r22, 0xB0	; 176
     bc8:	4f ef       	ldi	r20, 0xFF	; 255
     bca:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	60 e4       	ldi	r22, 0x40	; 64
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
			 
		SPCR |=  gConfig->ENABLE;
     bd8:	9d b1       	in	r25, 0x0d	; 13
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	89 2b       	or	r24, r25
     bde:	8d b9       	out	0x0d, r24	; 13

   
		
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <SPI_Send>:


void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     be6:	8f b9       	out	0x0f, r24	; 15
     /* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)))
     be8:	77 9b       	sbis	0x0e, 7	; 14
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <SPI_Send+0x2>
     ;
}
     bec:	08 95       	ret

00000bee <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     bee:	77 9b       	sbis	0x0e, 7	; 14
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <SPI_Receive>
	//return SPDR ; // Received data
	return SPDR;
     bf2:	8f b1       	in	r24, 0x0f	; 15
}
     bf4:	08 95       	ret

00000bf6 <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL); 
     bf6:	8e b1       	in	r24, 0x0e	; 14
     bf8:	82 95       	swap	r24
     bfa:	86 95       	lsr	r24
     bfc:	86 95       	lsr	r24
     bfe:	83 70       	andi	r24, 0x03	; 3
}
     c00:	81 70       	andi	r24, 0x01	; 1
     c02:	08 95       	ret

00000c04 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     c04:	82 bf       	out	0x32, r24	; 50
}
     c06:	08 95       	ret

00000c08 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     c08:	82 b7       	in	r24, 0x32	; 50
}
     c0a:	08 95       	ret

00000c0c <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     c0c:	83 b7       	in	r24, 0x33	; 51
     c0e:	88 7f       	andi	r24, 0xF8	; 248
     c10:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     c12:	93 b7       	in	r25, 0x33	; 51
     c14:	80 91 76 00 	lds	r24, 0x0076
     c18:	89 2b       	or	r24, r25
     c1a:	83 bf       	out	0x33, r24	; 51
}
     c1c:	08 95       	ret

00000c1e <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     c1e:	83 b7       	in	r24, 0x33	; 51
     c20:	88 7f       	andi	r24, 0xF8	; 248
     c22:	83 bf       	out	0x33, r24	; 51

 }
     c24:	08 95       	ret

00000c26 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     c26:	ef 92       	push	r14
     c28:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     c2a:	44 23       	and	r20, r20
     c2c:	19 f4       	brne	.+6      	; 0xc34 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     c2e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <timer0Stop>
     c32:	48 c0       	rjmp	.+144    	; 0xcc4 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     c34:	93 b7       	in	r25, 0x33	; 51
     c36:	89 2b       	or	r24, r25
     c38:	84 2b       	or	r24, r20
     c3a:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     c3c:	40 93 76 00 	sts	0x0076, r20
TCNT0 = u8_initialValue;
     c40:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     c42:	60 31       	cpi	r22, 0x10	; 16
     c44:	71 f0       	breq	.+28     	; 0xc62 <timer0Init+0x3c>
     c46:	61 31       	cpi	r22, 0x11	; 17
     c48:	18 f4       	brcc	.+6      	; 0xc50 <timer0Init+0x2a>
     c4a:	66 23       	and	r22, r22
     c4c:	31 f0       	breq	.+12     	; 0xc5a <timer0Init+0x34>
     c4e:	14 c0       	rjmp	.+40     	; 0xc78 <timer0Init+0x52>
     c50:	60 32       	cpi	r22, 0x20	; 32
     c52:	59 f0       	breq	.+22     	; 0xc6a <timer0Init+0x44>
     c54:	60 33       	cpi	r22, 0x30	; 48
     c56:	81 f4       	brne	.+32     	; 0xc78 <timer0Init+0x52>
     c58:	0c c0       	rjmp	.+24     	; 0xc72 <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     c5a:	83 b7       	in	r24, 0x33	; 51
     c5c:	8f 7c       	andi	r24, 0xCF	; 207
     c5e:	83 bf       	out	0x33, r24	; 51
		break;
     c60:	0b c0       	rjmp	.+22     	; 0xc78 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	80 61       	ori	r24, 0x10	; 16
     c66:	83 bf       	out	0x33, r24	; 51
		break;
     c68:	07 c0       	rjmp	.+14     	; 0xc78 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     c6a:	83 b7       	in	r24, 0x33	; 51
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	83 bf       	out	0x33, r24	; 51

		break;
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     c72:	83 b7       	in	r24, 0x33	; 51
     c74:	80 63       	ori	r24, 0x30	; 48
     c76:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     c78:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	e8 16       	cp	r14, r24
     c7e:	69 f0       	breq	.+26     	; 0xc9a <timer0Init+0x74>
     c80:	e8 16       	cp	r14, r24
     c82:	20 f0       	brcs	.+8      	; 0xc8c <timer0Init+0x66>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	e8 16       	cp	r14, r24
     c88:	e9 f4       	brne	.+58     	; 0xcc4 <timer0Init+0x9e>
     c8a:	10 c0       	rjmp	.+32     	; 0xcac <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     c8c:	10 92 75 00 	sts	0x0075, r1
G_interrupt_Disable();
     c90:	0e 94 55 01 	call	0x2aa	; 0x2aa <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     c94:	89 b7       	in	r24, 0x39	; 57
     c96:	19 be       	out	0x39, r1	; 57
break;
     c98:	15 c0       	rjmp	.+42     	; 0xcc4 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 75 00 	sts	0x0075, r24
G_interrupt_Enable();
     ca0:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     ca4:	89 b7       	in	r24, 0x39	; 57
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	89 bf       	out	0x39, r24	; 57
break;
     caa:	0c c0       	rjmp	.+24     	; 0xcc4 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 75 00 	sts	0x0075, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     cb2:	8f b7       	in	r24, 0x3f	; 63
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     cb8:	89 b7       	in	r24, 0x39	; 57
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     cbe:	89 b7       	in	r24, 0x39	; 57
     cc0:	82 60       	ori	r24, 0x02	; 2
     cc2:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     cc4:	0f 91       	pop	r16
     cc6:	ef 90       	pop	r14
     cc8:	08 95       	ret

00000cca <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     cca:	ac 01       	movw	r20, r24
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	89 f0       	breq	.+34     	; 0xcfc <timer0DelayMs+0x32>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     ce0:	08 b6       	in	r0, 0x38	; 56
     ce2:	00 fe       	sbrs	r0, 0
     ce4:	fd cf       	rjmp	.-6      	; 0xce0 <timer0DelayMs+0x16>
	TIFR |=0x01;
     ce6:	28 b7       	in	r18, 0x38	; 56
     ce8:	21 60       	ori	r18, 0x01	; 1
     cea:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	a1 1d       	adc	r26, r1
     cf0:	b1 1d       	adc	r27, r1
     cf2:	84 17       	cp	r24, r20
     cf4:	95 07       	cpc	r25, r21
     cf6:	a6 07       	cpc	r26, r22
     cf8:	b7 07       	cpc	r27, r23
     cfa:	90 f3       	brcs	.-28     	; 0xce0 <timer0DelayMs+0x16>
     cfc:	08 95       	ret

00000cfe <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	a1 05       	cpc	r26, r1
     d06:	b1 05       	cpc	r27, r1
     d08:	31 f0       	breq	.+12     	; 0xd16 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     d0a:	80 ef       	ldi	r24, 0xF0	; 240
     d0c:	0e 94 02 06 	call	0xc04	; 0xc04 <timer0Set>
	while(timer0Read()<=255);
     d10:	0e 94 04 06 	call	0xc08	; 0xc08 <timer0Read>
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     d16:	88 b7       	in	r24, 0x38	; 56
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	88 bf       	out	0x38, r24	; 56
}/*1*/
     d1c:	08 95       	ret

00000d1e <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	cf 93       	push	r28
     d28:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	80 93 71 00 	sts	0x0071, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     d30:	60 91 71 00 	lds	r22, 0x0071
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 b4 09 	call	0x1368	; 0x1368 <__floatunsisf>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     d42:	6c 2f       	mov	r22, r28
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 b4 09 	call	0x1368	; 0x1368 <__floatunsisf>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	48 ec       	ldi	r20, 0xC8	; 200
     d54:	52 e4       	ldi	r21, 0x42	; 66
     d56:	0e 94 20 09 	call	0x1240	; 0x1240 <__divsf3>
     d5a:	9b 01       	movw	r18, r22
     d5c:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     d5e:	c7 01       	movw	r24, r14
     d60:	b6 01       	movw	r22, r12
     d62:	0e 94 42 0a 	call	0x1484	; 0x1484 <__mulsf3>
     d66:	0e 94 88 09 	call	0x1310	; 0x1310 <__fixunssfsi>
     d6a:	60 93 71 00 	sts	0x0071, r22
switch(pooling)
     d6e:	80 91 75 00 	lds	r24, 0x0075
     d72:	88 23       	and	r24, r24
     d74:	19 f0       	breq	.+6      	; 0xd7c <timer0SwPWM+0x5e>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	29 f5       	brne	.+74     	; 0xdc4 <timer0SwPWM+0xa6>
     d7a:	1f c0       	rjmp	.+62     	; 0xdba <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     d7c:	0e 94 06 06 	call	0xc0c	; 0xc0c <timer0Start>
	timer0Set(pwm_time_on);
     d80:	80 91 71 00 	lds	r24, 0x0071
     d84:	0e 94 02 06 	call	0xc04	; 0xc04 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     d88:	08 b6       	in	r0, 0x38	; 56
     d8a:	00 fe       	sbrs	r0, 0
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <timer0SwPWM+0x6a>
	TIFR |=0x01;
     d8e:	88 b7       	in	r24, 0x38	; 56
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     d94:	85 b3       	in	r24, 0x15	; 21
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     d9a:	0e 94 06 06 	call	0xc0c	; 0xc0c <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     d9e:	80 91 71 00 	lds	r24, 0x0071
     da2:	80 95       	com	r24
     da4:	0e 94 02 06 	call	0xc04	; 0xc04 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     da8:	08 b6       	in	r0, 0x38	; 56
     daa:	00 fe       	sbrs	r0, 0
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <timer0SwPWM+0x8a>
	TIFR |=0x01;
     dae:	88 b7       	in	r24, 0x38	; 56
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     db4:	85 b3       	in	r24, 0x15	; 21
     db6:	15 ba       	out	0x15, r1	; 21

break;
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     dba:	0e 94 06 06 	call	0xc0c	; 0xc0c <timer0Start>
OCR0=pwm_time_on;
     dbe:	80 91 71 00 	lds	r24, 0x0071
     dc2:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     dc4:	cf 91       	pop	r28
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     dd0:	82 b3       	in	r24, 0x12	; 18
     dd2:	80 95       	com	r24
     dd4:	82 bb       	out	0x12, r24	; 18

}
     dd6:	08 95       	ret

00000dd8 <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     dd8:	af 92       	push	r10
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	d9 01       	movw	r26, r18
     de4:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     de6:	ee b5       	in	r30, 0x2e	; 46
     de8:	ff b5       	in	r31, 0x2f	; 47
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	86 2b       	or	r24, r22
     dee:	97 2b       	or	r25, r23
     df0:	8e 2b       	or	r24, r30
     df2:	9f 2b       	or	r25, r31
     df4:	9f bd       	out	0x2f, r25	; 47
     df6:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     df8:	40 93 72 00 	sts	0x0072, r20
	OCR1A =u16_outputCompareA;
     dfc:	1b bd       	out	0x2b, r17	; 43
     dfe:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     e00:	f9 bc       	out	0x29, r15	; 41
     e02:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     e04:	bd bd       	out	0x2d, r27	; 45
     e06:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     e08:	28 30       	cpi	r18, 0x08	; 8
     e0a:	d1 f0       	breq	.+52     	; 0xe40 <timer1Init+0x68>
     e0c:	29 30       	cpi	r18, 0x09	; 9
     e0e:	28 f4       	brcc	.+10     	; 0xe1a <timer1Init+0x42>
     e10:	aa 20       	and	r10, r10
     e12:	51 f0       	breq	.+20     	; 0xe28 <timer1Init+0x50>
     e14:	24 30       	cpi	r18, 0x04	; 4
     e16:	f9 f4       	brne	.+62     	; 0xe56 <timer1Init+0x7e>
     e18:	0b c0       	rjmp	.+22     	; 0xe30 <timer1Init+0x58>
     e1a:	20 32       	cpi	r18, 0x20	; 32
     e1c:	a9 f0       	breq	.+42     	; 0xe48 <timer1Init+0x70>
     e1e:	2c 33       	cpi	r18, 0x3C	; 60
     e20:	b9 f0       	breq	.+46     	; 0xe50 <timer1Init+0x78>
     e22:	20 31       	cpi	r18, 0x10	; 16
     e24:	c1 f4       	brne	.+48     	; 0xe56 <timer1Init+0x7e>
     e26:	08 c0       	rjmp	.+16     	; 0xe38 <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     e28:	89 b7       	in	r24, 0x39	; 57
     e2a:	83 7c       	andi	r24, 0xC3	; 195
     e2c:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     e30:	89 b7       	in	r24, 0x39	; 57
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	89 bf       	out	0x39, r24	; 57
		break;
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     e38:	89 b7       	in	r24, 0x39	; 57
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	89 bf       	out	0x39, r24	; 57
			break;
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     e40:	89 b7       	in	r24, 0x39	; 57
     e42:	88 60       	ori	r24, 0x08	; 8
     e44:	89 bf       	out	0x39, r24	; 57
			break;
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     e48:	89 b7       	in	r24, 0x39	; 57
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	89 bf       	out	0x39, r24	; 57
			break;
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     e50:	89 b7       	in	r24, 0x39	; 57
     e52:	8c 63       	ori	r24, 0x3C	; 60
     e54:	89 bf       	out	0x39, r24	; 57
	}




	}
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	af 90       	pop	r10
     e60:	08 95       	ret

00000e62 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     e62:	9d bd       	out	0x2d, r25	; 45
     e64:	8c bd       	out	0x2c, r24	; 44
}
     e66:	08 95       	ret

00000e68 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     e68:	8c b5       	in	r24, 0x2c	; 44
     e6a:	9d b5       	in	r25, 0x2d	; 45
}
     e6c:	08 95       	ret

00000e6e <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     e6e:	2e b5       	in	r18, 0x2e	; 46
     e70:	3f b5       	in	r19, 0x2f	; 47
     e72:	80 91 72 00 	lds	r24, 0x0072
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	82 2b       	or	r24, r18
     e7a:	93 2b       	or	r25, r19
     e7c:	9f bd       	out	0x2f, r25	; 47
     e7e:	8e bd       	out	0x2e, r24	; 46
}
     e80:	08 95       	ret

00000e82 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     e82:	8e b5       	in	r24, 0x2e	; 46
     e84:	9f b5       	in	r25, 0x2f	; 47
     e86:	88 7f       	andi	r24, 0xF8	; 248
     e88:	9f bd       	out	0x2f, r25	; 47
     e8a:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     e8c:	08 95       	ret

00000e8e <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     e8e:	08 95       	ret

00000e90 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     e90:	08 95       	ret

00000e92 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     e92:	08 95       	ret

00000e94 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     e94:	84 bd       	out	0x24, r24	; 36
}
     e96:	08 95       	ret

00000e98 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     e98:	84 b5       	in	r24, 0x24	; 36
}
     e9a:	08 95       	ret

00000e9c <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     e9c:	85 b5       	in	r24, 0x25	; 37
     e9e:	88 7f       	andi	r24, 0xF8	; 248
     ea0:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     ea2:	95 b5       	in	r25, 0x25	; 37
     ea4:	80 91 73 00 	lds	r24, 0x0073
     ea8:	89 2b       	or	r24, r25
     eaa:	85 bd       	out	0x25, r24	; 37
}
     eac:	08 95       	ret

00000eae <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     eae:	85 b5       	in	r24, 0x25	; 37
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	85 bd       	out	0x25, r24	; 37

}
     eb4:	08 95       	ret

00000eb6 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     eb6:	cf 92       	push	r12
     eb8:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     eba:	44 23       	and	r20, r20
     ebc:	19 f4       	brne	.+6      	; 0xec4 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     ebe:	0e 94 57 07 	call	0xeae	; 0xeae <timer2Stop>
     ec2:	46 c0       	rjmp	.+140    	; 0xf50 <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     ec4:	95 b5       	in	r25, 0x25	; 37
     ec6:	89 2b       	or	r24, r25
     ec8:	84 2b       	or	r24, r20
     eca:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     ecc:	40 93 73 00 	sts	0x0073, r20
TCNT2 = u8_initialValue;
     ed0:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     ed2:	60 31       	cpi	r22, 0x10	; 16
     ed4:	71 f0       	breq	.+28     	; 0xef2 <timer2Init+0x3c>
     ed6:	61 31       	cpi	r22, 0x11	; 17
     ed8:	18 f4       	brcc	.+6      	; 0xee0 <timer2Init+0x2a>
     eda:	66 23       	and	r22, r22
     edc:	31 f0       	breq	.+12     	; 0xeea <timer2Init+0x34>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <timer2Init+0x52>
     ee0:	60 32       	cpi	r22, 0x20	; 32
     ee2:	59 f0       	breq	.+22     	; 0xefa <timer2Init+0x44>
     ee4:	60 33       	cpi	r22, 0x30	; 48
     ee6:	81 f4       	brne	.+32     	; 0xf08 <timer2Init+0x52>
     ee8:	0c c0       	rjmp	.+24     	; 0xf02 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     eea:	85 b5       	in	r24, 0x25	; 37
     eec:	8f 7c       	andi	r24, 0xCF	; 207
     eee:	85 bd       	out	0x25, r24	; 37
		break;
     ef0:	0b c0       	rjmp	.+22     	; 0xf08 <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     ef2:	85 b5       	in	r24, 0x25	; 37
     ef4:	80 61       	ori	r24, 0x10	; 16
     ef6:	85 bd       	out	0x25, r24	; 37
		break;
     ef8:	07 c0       	rjmp	.+14     	; 0xf08 <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     efa:	85 b5       	in	r24, 0x25	; 37
     efc:	80 62       	ori	r24, 0x20	; 32
     efe:	85 bd       	out	0x25, r24	; 37

		break;
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     f02:	85 b5       	in	r24, 0x25	; 37
     f04:	80 63       	ori	r24, 0x30	; 48
     f06:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     f08:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     f0a:	80 e4       	ldi	r24, 0x40	; 64
     f0c:	c8 16       	cp	r12, r24
     f0e:	61 f0       	breq	.+24     	; 0xf28 <timer2Init+0x72>
     f10:	80 e8       	ldi	r24, 0x80	; 128
     f12:	c8 16       	cp	r12, r24
     f14:	91 f0       	breq	.+36     	; 0xf3a <timer2Init+0x84>
     f16:	cc 20       	and	r12, r12
     f18:	d9 f4       	brne	.+54     	; 0xf50 <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
     f1a:	10 92 74 00 	sts	0x0074, r1
G_interrupt_Disable();
     f1e:	0e 94 55 01 	call	0x2aa	; 0x2aa <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     f22:	89 b7       	in	r24, 0x39	; 57
     f24:	19 be       	out	0x39, r1	; 57
break;
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 74 00 	sts	0x0074, r24
G_interrupt_Enable();
     f2e:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     f32:	89 b7       	in	r24, 0x39	; 57
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	89 bf       	out	0x39, r24	; 57
break;
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 74 00 	sts	0x0074, r24
G_interrupt_Enable();
     f40:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     f44:	89 b7       	in	r24, 0x39	; 57
     f46:	80 64       	ori	r24, 0x40	; 64
     f48:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     f4a:	89 b7       	in	r24, 0x39	; 57
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	89 bf       	out	0x39, r24	; 57

}



}
     f50:	0f 91       	pop	r16
     f52:	cf 90       	pop	r12
     f54:	08 95       	ret

00000f56 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <timer2DelayMs+0xa>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <timer2DelayMs+0xc>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     f68:	1a 82       	std	Y+2, r1	; 0x02
     f6a:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     f70:	80 91 73 00 	lds	r24, 0x0073
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	f9 f0       	breq	.+62     	; 0xfb6 <timer2DelayMs+0x60>
     f78:	85 30       	cpi	r24, 0x05	; 5
     f7a:	38 f4       	brcc	.+14     	; 0xf8a <timer2DelayMs+0x34>
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	89 f0       	breq	.+34     	; 0xfa2 <timer2DelayMs+0x4c>
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	a0 f4       	brcc	.+40     	; 0xfac <timer2DelayMs+0x56>
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	51 f5       	brne	.+84     	; 0xfdc <timer2DelayMs+0x86>
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <timer2DelayMs+0x42>
     f8a:	86 30       	cpi	r24, 0x06	; 6
     f8c:	f1 f0       	breq	.+60     	; 0xfca <timer2DelayMs+0x74>
     f8e:	86 30       	cpi	r24, 0x06	; 6
     f90:	b8 f0       	brcs	.+46     	; 0xfc0 <timer2DelayMs+0x6a>
     f92:	87 30       	cpi	r24, 0x07	; 7
     f94:	19 f5       	brne	.+70     	; 0xfdc <timer2DelayMs+0x86>
     f96:	1e c0       	rjmp	.+60     	; 0xfd4 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     f98:	8a e3       	ldi	r24, 0x3A	; 58
     f9a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fa0:	1d c0       	rjmp	.+58     	; 0xfdc <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     fa2:	88 e0       	ldi	r24, 0x08	; 8
     fa4:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     fa6:	8c e0       	ldi	r24, 0x0C	; 12
     fa8:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     faa:	18 c0       	rjmp	.+48     	; 0xfdc <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fb4:	13 c0       	rjmp	.+38     	; 0xfdc <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fbe:	0e c0       	rjmp	.+28     	; 0xfdc <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     fc4:	83 e8       	ldi	r24, 0x83	; 131
     fc6:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     fce:	82 ec       	ldi	r24, 0xC2	; 194
     fd0:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     fd8:	80 ef       	ldi	r24, 0xF0	; 240
     fda:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     fdc:	1a 82       	std	Y+2, r1	; 0x02
     fde:	19 82       	std	Y+1, r1	; 0x01
     fe0:	2b 81       	ldd	r18, Y+3	; 0x03
     fe2:	49 81       	ldd	r20, Y+1	; 0x01
     fe4:	5a 81       	ldd	r21, Y+2	; 0x02
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	02 9f       	mul	r16, r18
     fea:	c0 01       	movw	r24, r0
     fec:	03 9f       	mul	r16, r19
     fee:	90 0d       	add	r25, r0
     ff0:	12 9f       	mul	r17, r18
     ff2:	90 0d       	add	r25, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	48 17       	cp	r20, r24
     ff8:	59 07       	cpc	r21, r25
     ffa:	e0 f4       	brcc	.+56     	; 0x1034 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	0e 94 4a 07 	call	0xe94	; 0xe94 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
    1002:	08 b6       	in	r0, 0x38	; 56
    1004:	06 fe       	sbrs	r0, 6
    1006:	fd cf       	rjmp	.-6      	; 0x1002 <timer2DelayMs+0xac>
		TIFR |=0x40;
    1008:	88 b7       	in	r24, 0x38	; 56
    100a:	80 64       	ori	r24, 0x40	; 64
    100c:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	2b 81       	ldd	r18, Y+3	; 0x03
    101a:	49 81       	ldd	r20, Y+1	; 0x01
    101c:	5a 81       	ldd	r21, Y+2	; 0x02
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	02 9f       	mul	r16, r18
    1022:	c0 01       	movw	r24, r0
    1024:	03 9f       	mul	r16, r19
    1026:	90 0d       	add	r25, r0
    1028:	12 9f       	mul	r17, r18
    102a:	90 0d       	add	r25, r0
    102c:	11 24       	eor	r1, r1
    102e:	48 17       	cp	r20, r24
    1030:	59 07       	cpc	r21, r25
    1032:	20 f3       	brcs	.-56     	; 0xffc <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	00 d0       	rcall	.+0      	; 0x1054 <timer2DelayUs+0xe>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	6b 01       	movw	r12, r22
    105a:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    105c:	1a 82       	std	Y+2, r1	; 0x02
    105e:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	8c 15       	cp	r24, r12
    106e:	9d 05       	cpc	r25, r13
    1070:	ae 05       	cpc	r26, r14
    1072:	bf 05       	cpc	r27, r15
    1074:	b8 f4       	brcc	.+46     	; 0x10a4 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
    1076:	8e ef       	ldi	r24, 0xFE	; 254
    1078:	0e 94 4a 07 	call	0xe94	; 0xe94 <timer2Set>
		while ((TIFR & 0x40)==0);
    107c:	08 b6       	in	r0, 0x38	; 56
    107e:	06 fe       	sbrs	r0, 6
    1080:	fd cf       	rjmp	.-6      	; 0x107c <timer2DelayUs+0x36>
		TIFR |=0x40;
    1082:	88 b7       	in	r24, 0x38	; 56
    1084:	80 64       	ori	r24, 0x40	; 64
    1086:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	8c 15       	cp	r24, r12
    109c:	9d 05       	cpc	r25, r13
    109e:	ae 05       	cpc	r26, r14
    10a0:	bf 05       	cpc	r27, r15
    10a2:	48 f3       	brcs	.-46     	; 0x1076 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	08 95       	ret

000010b6 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	cf 93       	push	r28
    10c0:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	80 93 71 00 	sts	0x0071, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    10c8:	60 91 71 00 	lds	r22, 0x0071
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 b4 09 	call	0x1368	; 0x1368 <__floatunsisf>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    10da:	6c 2f       	mov	r22, r28
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 b4 09 	call	0x1368	; 0x1368 <__floatunsisf>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	48 ec       	ldi	r20, 0xC8	; 200
    10ec:	52 e4       	ldi	r21, 0x42	; 66
    10ee:	0e 94 20 09 	call	0x1240	; 0x1240 <__divsf3>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	0e 94 42 0a 	call	0x1484	; 0x1484 <__mulsf3>
    10fe:	0e 94 88 09 	call	0x1310	; 0x1310 <__fixunssfsi>
    1102:	60 93 71 00 	sts	0x0071, r22
switch(pooling_2)
    1106:	80 91 74 00 	lds	r24, 0x0074
    110a:	88 23       	and	r24, r24
    110c:	19 f0       	breq	.+6      	; 0x1114 <timer2SwPWM+0x5e>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	29 f5       	brne	.+74     	; 0x115c <timer2SwPWM+0xa6>
    1112:	1f c0       	rjmp	.+62     	; 0x1152 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
    1114:	0e 94 4e 07 	call	0xe9c	; 0xe9c <timer2Start>
		timer2Set(pwm_time_on);
    1118:	80 91 71 00 	lds	r24, 0x0071
    111c:	0e 94 4a 07 	call	0xe94	; 0xe94 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
    1120:	08 b6       	in	r0, 0x38	; 56
    1122:	02 fe       	sbrs	r0, 2
    1124:	fd cf       	rjmp	.-6      	; 0x1120 <timer2SwPWM+0x6a>
		TIFR |=0x04;
    1126:	88 b7       	in	r24, 0x38	; 56
    1128:	84 60       	ori	r24, 0x04	; 4
    112a:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
    112c:	85 b3       	in	r24, 0x15	; 21
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	85 bb       	out	0x15, r24	; 21
		timer2Start();
    1132:	0e 94 4e 07 	call	0xe9c	; 0xe9c <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    1136:	80 91 71 00 	lds	r24, 0x0071
    113a:	80 95       	com	r24
    113c:	0e 94 4a 07 	call	0xe94	; 0xe94 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
    1140:	08 b6       	in	r0, 0x38	; 56
    1142:	02 fe       	sbrs	r0, 2
    1144:	fd cf       	rjmp	.-6      	; 0x1140 <timer2SwPWM+0x8a>
		TIFR |=0x04;
    1146:	88 b7       	in	r24, 0x38	; 56
    1148:	84 60       	ori	r24, 0x04	; 4
    114a:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
    114c:	85 b3       	in	r24, 0x15	; 21
    114e:	15 ba       	out	0x15, r1	; 21

		break;
    1150:	05 c0       	rjmp	.+10     	; 0x115c <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
    1152:	0e 94 4e 07 	call	0xe9c	; 0xe9c <timer2Start>
		OCR2=pwm_time_on;
    1156:	80 91 71 00 	lds	r24, 0x0071
    115a:	83 bd       	out	0x23, r24	; 35
	}

}


}
    115c:	cf 91       	pop	r28
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	08 95       	ret

00001168 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    1168:	08 95       	ret

0000116a <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
    116a:	08 95       	ret

0000116c <Uart_Init>:

uint8_t gU8_Data_Recieved=0;

void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    116c:	0f 93       	push	r16
switch (Baud_rate) {
    116e:	83 33       	cpi	r24, 0x33	; 51
    1170:	71 f0       	breq	.+28     	; 0x118e <Uart_Init+0x22>
    1172:	84 33       	cpi	r24, 0x34	; 52
    1174:	18 f4       	brcc	.+6      	; 0x117c <Uart_Init+0x10>
    1176:	89 31       	cpi	r24, 0x19	; 25
    1178:	79 f4       	brne	.+30     	; 0x1198 <Uart_Init+0x2c>
    117a:	0c c0       	rjmp	.+24     	; 0x1194 <Uart_Init+0x28>
    117c:	84 34       	cpi	r24, 0x44	; 68
    117e:	21 f0       	breq	.+8      	; 0x1188 <Uart_Init+0x1c>
    1180:	87 36       	cpi	r24, 0x67	; 103
    1182:	51 f4       	brne	.+20     	; 0x1198 <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
    1184:	89 b9       	out	0x09, r24	; 9
  break;
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
    1188:	84 e4       	ldi	r24, 0x44	; 68
    118a:	89 b9       	out	0x09, r24	; 9
  break;
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
    118e:	83 e3       	ldi	r24, 0x33	; 51
    1190:	89 b9       	out	0x09, r24	; 9
  break;
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
    1198:	66 23       	and	r22, r22
    119a:	31 f0       	breq	.+12     	; 0x11a8 <Uart_Init+0x3c>
    119c:	61 30       	cpi	r22, 0x01	; 1
    119e:	11 f0       	breq	.+4      	; 0x11a4 <Uart_Init+0x38>

uint8_t gU8_Data_Recieved=0;

void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
    11a4:	88 e8       	ldi	r24, 0x88	; 136
  break;
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
    11a8:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	a1 f0       	breq	.+40     	; 0x11d6 <Uart_Init+0x6a>
    11ae:	23 30       	cpi	r18, 0x03	; 3
    11b0:	28 f4       	brcc	.+10     	; 0x11bc <Uart_Init+0x50>
    11b2:	22 23       	and	r18, r18
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <Uart_Init+0x5a>
    11b6:	21 30       	cpi	r18, 0x01	; 1
    11b8:	b9 f4       	brne	.+46     	; 0x11e8 <Uart_Init+0x7c>
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <Uart_Init+0x62>
    11bc:	23 30       	cpi	r18, 0x03	; 3
    11be:	79 f0       	breq	.+30     	; 0x11de <Uart_Init+0x72>
    11c0:	24 30       	cpi	r18, 0x04	; 4
    11c2:	91 f4       	brne	.+36     	; 0x11e8 <Uart_Init+0x7c>
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    11c6:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    11c8:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    11ca:	52 98       	cbi	0x0a, 2	; 10
break;
    11cc:	0d c0       	rjmp	.+26     	; 0x11e8 <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    11ce:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    11d0:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    11d2:	52 98       	cbi	0x0a, 2	; 10
  break;
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    11d6:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    11d8:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    11da:	52 98       	cbi	0x0a, 2	; 10
  break;
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    11de:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    11e0:	52 98       	cbi	0x0a, 2	; 10
break;
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    11e4:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    11e6:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    11e8:	00 23       	and	r16, r16
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <Uart_Init+0x86>
    11ec:	01 30       	cpi	r16, 0x01	; 1
    11ee:	29 f4       	brne	.+10     	; 0x11fa <Uart_Init+0x8e>
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    11f2:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    11f4:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    11f8:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    11fa:	41 30       	cpi	r20, 0x01	; 1
    11fc:	41 f0       	breq	.+16     	; 0x120e <Uart_Init+0xa2>
    11fe:	41 30       	cpi	r20, 0x01	; 1
    1200:	18 f0       	brcs	.+6      	; 0x1208 <Uart_Init+0x9c>
    1202:	42 30       	cpi	r20, 0x02	; 2
    1204:	41 f4       	brne	.+16     	; 0x1216 <Uart_Init+0xaa>
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    1208:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    120a:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    120e:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    1210:	80 6a       	ori	r24, 0xA0	; 160
break;
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    1214:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    1216:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    1218:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    121a:	54 9a       	sbi	0x0a, 4	; 10
}
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret

00001220 <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    1220:	5d 9b       	sbis	0x0b, 5	; 11
    1222:	fe cf       	rjmp	.-4      	; 0x1220 <UartTransmitPooling>
UDR=Data;
    1224:	8c b9       	out	0x0c, r24	; 12
}
    1226:	08 95       	ret

00001228 <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));					/* Wait until new data receive */
    1228:	5f 9b       	sbis	0x0b, 7	; 11
    122a:	fe cf       	rjmp	.-4      	; 0x1228 <UartRecievePooling>
data=UDR;
    122c:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    122e:	08 95       	ret

00001230 <Enable_recieve_interrupt>:


void Enable_recieve_interrupt(void)
{
G_interrupt_Enable();
    1230:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
SET_BIT(UCSRA,RXCIE);
    1234:	5f 9a       	sbi	0x0b, 7	; 11
}
    1236:	08 95       	ret

00001238 <UartRecieveInterrupt>:
void UartRecieveInterrupt(void)
{
gU8_Data_Recieved=UDR;
    1238:	8c b1       	in	r24, 0x0c	; 12
    123a:	80 93 77 00 	sts	0x0077, r24
}
    123e:	08 95       	ret

00001240 <__divsf3>:
    1240:	0c d0       	rcall	.+24     	; 0x125a <__divsf3x>
    1242:	e6 c0       	rjmp	.+460    	; 0x1410 <__fp_round>
    1244:	de d0       	rcall	.+444    	; 0x1402 <__fp_pscB>
    1246:	40 f0       	brcs	.+16     	; 0x1258 <__divsf3+0x18>
    1248:	d5 d0       	rcall	.+426    	; 0x13f4 <__fp_pscA>
    124a:	30 f0       	brcs	.+12     	; 0x1258 <__divsf3+0x18>
    124c:	21 f4       	brne	.+8      	; 0x1256 <__divsf3+0x16>
    124e:	5f 3f       	cpi	r21, 0xFF	; 255
    1250:	19 f0       	breq	.+6      	; 0x1258 <__divsf3+0x18>
    1252:	c7 c0       	rjmp	.+398    	; 0x13e2 <__fp_inf>
    1254:	51 11       	cpse	r21, r1
    1256:	10 c1       	rjmp	.+544    	; 0x1478 <__fp_szero>
    1258:	ca c0       	rjmp	.+404    	; 0x13ee <__fp_nan>

0000125a <__divsf3x>:
    125a:	eb d0       	rcall	.+470    	; 0x1432 <__fp_split3>
    125c:	98 f3       	brcs	.-26     	; 0x1244 <__divsf3+0x4>

0000125e <__divsf3_pse>:
    125e:	99 23       	and	r25, r25
    1260:	c9 f3       	breq	.-14     	; 0x1254 <__divsf3+0x14>
    1262:	55 23       	and	r21, r21
    1264:	b1 f3       	breq	.-20     	; 0x1252 <__divsf3+0x12>
    1266:	95 1b       	sub	r25, r21
    1268:	55 0b       	sbc	r21, r21
    126a:	bb 27       	eor	r27, r27
    126c:	aa 27       	eor	r26, r26
    126e:	62 17       	cp	r22, r18
    1270:	73 07       	cpc	r23, r19
    1272:	84 07       	cpc	r24, r20
    1274:	38 f0       	brcs	.+14     	; 0x1284 <__divsf3_pse+0x26>
    1276:	9f 5f       	subi	r25, 0xFF	; 255
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	44 1f       	adc	r20, r20
    1280:	aa 1f       	adc	r26, r26
    1282:	a9 f3       	breq	.-22     	; 0x126e <__divsf3_pse+0x10>
    1284:	33 d0       	rcall	.+102    	; 0x12ec <__divsf3_pse+0x8e>
    1286:	0e 2e       	mov	r0, r30
    1288:	3a f0       	brmi	.+14     	; 0x1298 <__divsf3_pse+0x3a>
    128a:	e0 e8       	ldi	r30, 0x80	; 128
    128c:	30 d0       	rcall	.+96     	; 0x12ee <__divsf3_pse+0x90>
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	e6 95       	lsr	r30
    1294:	00 1c       	adc	r0, r0
    1296:	ca f7       	brpl	.-14     	; 0x128a <__divsf3_pse+0x2c>
    1298:	29 d0       	rcall	.+82     	; 0x12ec <__divsf3_pse+0x8e>
    129a:	fe 2f       	mov	r31, r30
    129c:	27 d0       	rcall	.+78     	; 0x12ec <__divsf3_pse+0x8e>
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	bb 1f       	adc	r27, r27
    12a6:	26 17       	cp	r18, r22
    12a8:	37 07       	cpc	r19, r23
    12aa:	48 07       	cpc	r20, r24
    12ac:	ab 07       	cpc	r26, r27
    12ae:	b0 e8       	ldi	r27, 0x80	; 128
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__divsf3_pse+0x56>
    12b2:	bb 0b       	sbc	r27, r27
    12b4:	80 2d       	mov	r24, r0
    12b6:	bf 01       	movw	r22, r30
    12b8:	ff 27       	eor	r31, r31
    12ba:	93 58       	subi	r25, 0x83	; 131
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	2a f0       	brmi	.+10     	; 0x12ca <__divsf3_pse+0x6c>
    12c0:	9e 3f       	cpi	r25, 0xFE	; 254
    12c2:	51 05       	cpc	r21, r1
    12c4:	68 f0       	brcs	.+26     	; 0x12e0 <__divsf3_pse+0x82>
    12c6:	8d c0       	rjmp	.+282    	; 0x13e2 <__fp_inf>
    12c8:	d7 c0       	rjmp	.+430    	; 0x1478 <__fp_szero>
    12ca:	5f 3f       	cpi	r21, 0xFF	; 255
    12cc:	ec f3       	brlt	.-6      	; 0x12c8 <__divsf3_pse+0x6a>
    12ce:	98 3e       	cpi	r25, 0xE8	; 232
    12d0:	dc f3       	brlt	.-10     	; 0x12c8 <__divsf3_pse+0x6a>
    12d2:	86 95       	lsr	r24
    12d4:	77 95       	ror	r23
    12d6:	67 95       	ror	r22
    12d8:	b7 95       	ror	r27
    12da:	f7 95       	ror	r31
    12dc:	9f 5f       	subi	r25, 0xFF	; 255
    12de:	c9 f7       	brne	.-14     	; 0x12d2 <__divsf3_pse+0x74>
    12e0:	88 0f       	add	r24, r24
    12e2:	91 1d       	adc	r25, r1
    12e4:	96 95       	lsr	r25
    12e6:	87 95       	ror	r24
    12e8:	97 f9       	bld	r25, 7
    12ea:	08 95       	ret
    12ec:	e1 e0       	ldi	r30, 0x01	; 1
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	bb 1f       	adc	r27, r27
    12f6:	62 17       	cp	r22, r18
    12f8:	73 07       	cpc	r23, r19
    12fa:	84 07       	cpc	r24, r20
    12fc:	ba 07       	cpc	r27, r26
    12fe:	20 f0       	brcs	.+8      	; 0x1308 <__divsf3_pse+0xaa>
    1300:	62 1b       	sub	r22, r18
    1302:	73 0b       	sbc	r23, r19
    1304:	84 0b       	sbc	r24, r20
    1306:	ba 0b       	sbc	r27, r26
    1308:	ee 1f       	adc	r30, r30
    130a:	88 f7       	brcc	.-30     	; 0x12ee <__divsf3_pse+0x90>
    130c:	e0 95       	com	r30
    130e:	08 95       	ret

00001310 <__fixunssfsi>:
    1310:	98 d0       	rcall	.+304    	; 0x1442 <__fp_splitA>
    1312:	88 f0       	brcs	.+34     	; 0x1336 <__fixunssfsi+0x26>
    1314:	9f 57       	subi	r25, 0x7F	; 127
    1316:	90 f0       	brcs	.+36     	; 0x133c <__fixunssfsi+0x2c>
    1318:	b9 2f       	mov	r27, r25
    131a:	99 27       	eor	r25, r25
    131c:	b7 51       	subi	r27, 0x17	; 23
    131e:	a0 f0       	brcs	.+40     	; 0x1348 <__fixunssfsi+0x38>
    1320:	d1 f0       	breq	.+52     	; 0x1356 <__fixunssfsi+0x46>
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	1a f0       	brmi	.+6      	; 0x1332 <__fixunssfsi+0x22>
    132c:	ba 95       	dec	r27
    132e:	c9 f7       	brne	.-14     	; 0x1322 <__fixunssfsi+0x12>
    1330:	12 c0       	rjmp	.+36     	; 0x1356 <__fixunssfsi+0x46>
    1332:	b1 30       	cpi	r27, 0x01	; 1
    1334:	81 f0       	breq	.+32     	; 0x1356 <__fixunssfsi+0x46>
    1336:	9f d0       	rcall	.+318    	; 0x1476 <__fp_zero>
    1338:	b1 e0       	ldi	r27, 0x01	; 1
    133a:	08 95       	ret
    133c:	9c c0       	rjmp	.+312    	; 0x1476 <__fp_zero>
    133e:	67 2f       	mov	r22, r23
    1340:	78 2f       	mov	r23, r24
    1342:	88 27       	eor	r24, r24
    1344:	b8 5f       	subi	r27, 0xF8	; 248
    1346:	39 f0       	breq	.+14     	; 0x1356 <__fixunssfsi+0x46>
    1348:	b9 3f       	cpi	r27, 0xF9	; 249
    134a:	cc f3       	brlt	.-14     	; 0x133e <__fixunssfsi+0x2e>
    134c:	86 95       	lsr	r24
    134e:	77 95       	ror	r23
    1350:	67 95       	ror	r22
    1352:	b3 95       	inc	r27
    1354:	d9 f7       	brne	.-10     	; 0x134c <__fixunssfsi+0x3c>
    1356:	3e f4       	brtc	.+14     	; 0x1366 <__fixunssfsi+0x56>
    1358:	90 95       	com	r25
    135a:	80 95       	com	r24
    135c:	70 95       	com	r23
    135e:	61 95       	neg	r22
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	08 95       	ret

00001368 <__floatunsisf>:
    1368:	e8 94       	clt
    136a:	09 c0       	rjmp	.+18     	; 0x137e <__floatsisf+0x12>

0000136c <__floatsisf>:
    136c:	97 fb       	bst	r25, 7
    136e:	3e f4       	brtc	.+14     	; 0x137e <__floatsisf+0x12>
    1370:	90 95       	com	r25
    1372:	80 95       	com	r24
    1374:	70 95       	com	r23
    1376:	61 95       	neg	r22
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	8f 4f       	sbci	r24, 0xFF	; 255
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	99 23       	and	r25, r25
    1380:	a9 f0       	breq	.+42     	; 0x13ac <__floatsisf+0x40>
    1382:	f9 2f       	mov	r31, r25
    1384:	96 e9       	ldi	r25, 0x96	; 150
    1386:	bb 27       	eor	r27, r27
    1388:	93 95       	inc	r25
    138a:	f6 95       	lsr	r31
    138c:	87 95       	ror	r24
    138e:	77 95       	ror	r23
    1390:	67 95       	ror	r22
    1392:	b7 95       	ror	r27
    1394:	f1 11       	cpse	r31, r1
    1396:	f8 cf       	rjmp	.-16     	; 0x1388 <__floatsisf+0x1c>
    1398:	fa f4       	brpl	.+62     	; 0x13d8 <__floatsisf+0x6c>
    139a:	bb 0f       	add	r27, r27
    139c:	11 f4       	brne	.+4      	; 0x13a2 <__floatsisf+0x36>
    139e:	60 ff       	sbrs	r22, 0
    13a0:	1b c0       	rjmp	.+54     	; 0x13d8 <__floatsisf+0x6c>
    13a2:	6f 5f       	subi	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	8f 4f       	sbci	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	16 c0       	rjmp	.+44     	; 0x13d8 <__floatsisf+0x6c>
    13ac:	88 23       	and	r24, r24
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <__floatsisf+0x48>
    13b0:	96 e9       	ldi	r25, 0x96	; 150
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <__floatsisf+0x6a>
    13b4:	77 23       	and	r23, r23
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <__floatsisf+0x54>
    13b8:	9e e8       	ldi	r25, 0x8E	; 142
    13ba:	87 2f       	mov	r24, r23
    13bc:	76 2f       	mov	r23, r22
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <__floatsisf+0x5e>
    13c0:	66 23       	and	r22, r22
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <__floatsisf+0x74>
    13c4:	96 e8       	ldi	r25, 0x86	; 134
    13c6:	86 2f       	mov	r24, r22
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	2a f0       	brmi	.+10     	; 0x13d8 <__floatsisf+0x6c>
    13ce:	9a 95       	dec	r25
    13d0:	66 0f       	add	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	da f7       	brpl	.-10     	; 0x13ce <__floatsisf+0x62>
    13d8:	88 0f       	add	r24, r24
    13da:	96 95       	lsr	r25
    13dc:	87 95       	ror	r24
    13de:	97 f9       	bld	r25, 7
    13e0:	08 95       	ret

000013e2 <__fp_inf>:
    13e2:	97 f9       	bld	r25, 7
    13e4:	9f 67       	ori	r25, 0x7F	; 127
    13e6:	80 e8       	ldi	r24, 0x80	; 128
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	08 95       	ret

000013ee <__fp_nan>:
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
    13f0:	80 ec       	ldi	r24, 0xC0	; 192
    13f2:	08 95       	ret

000013f4 <__fp_pscA>:
    13f4:	00 24       	eor	r0, r0
    13f6:	0a 94       	dec	r0
    13f8:	16 16       	cp	r1, r22
    13fa:	17 06       	cpc	r1, r23
    13fc:	18 06       	cpc	r1, r24
    13fe:	09 06       	cpc	r0, r25
    1400:	08 95       	ret

00001402 <__fp_pscB>:
    1402:	00 24       	eor	r0, r0
    1404:	0a 94       	dec	r0
    1406:	12 16       	cp	r1, r18
    1408:	13 06       	cpc	r1, r19
    140a:	14 06       	cpc	r1, r20
    140c:	05 06       	cpc	r0, r21
    140e:	08 95       	ret

00001410 <__fp_round>:
    1410:	09 2e       	mov	r0, r25
    1412:	03 94       	inc	r0
    1414:	00 0c       	add	r0, r0
    1416:	11 f4       	brne	.+4      	; 0x141c <__fp_round+0xc>
    1418:	88 23       	and	r24, r24
    141a:	52 f0       	brmi	.+20     	; 0x1430 <__fp_round+0x20>
    141c:	bb 0f       	add	r27, r27
    141e:	40 f4       	brcc	.+16     	; 0x1430 <__fp_round+0x20>
    1420:	bf 2b       	or	r27, r31
    1422:	11 f4       	brne	.+4      	; 0x1428 <__fp_round+0x18>
    1424:	60 ff       	sbrs	r22, 0
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <__fp_round+0x20>
    1428:	6f 5f       	subi	r22, 0xFF	; 255
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	08 95       	ret

00001432 <__fp_split3>:
    1432:	57 fd       	sbrc	r21, 7
    1434:	90 58       	subi	r25, 0x80	; 128
    1436:	44 0f       	add	r20, r20
    1438:	55 1f       	adc	r21, r21
    143a:	59 f0       	breq	.+22     	; 0x1452 <__fp_splitA+0x10>
    143c:	5f 3f       	cpi	r21, 0xFF	; 255
    143e:	71 f0       	breq	.+28     	; 0x145c <__fp_splitA+0x1a>
    1440:	47 95       	ror	r20

00001442 <__fp_splitA>:
    1442:	88 0f       	add	r24, r24
    1444:	97 fb       	bst	r25, 7
    1446:	99 1f       	adc	r25, r25
    1448:	61 f0       	breq	.+24     	; 0x1462 <__fp_splitA+0x20>
    144a:	9f 3f       	cpi	r25, 0xFF	; 255
    144c:	79 f0       	breq	.+30     	; 0x146c <__fp_splitA+0x2a>
    144e:	87 95       	ror	r24
    1450:	08 95       	ret
    1452:	12 16       	cp	r1, r18
    1454:	13 06       	cpc	r1, r19
    1456:	14 06       	cpc	r1, r20
    1458:	55 1f       	adc	r21, r21
    145a:	f2 cf       	rjmp	.-28     	; 0x1440 <__fp_split3+0xe>
    145c:	46 95       	lsr	r20
    145e:	f1 df       	rcall	.-30     	; 0x1442 <__fp_splitA>
    1460:	08 c0       	rjmp	.+16     	; 0x1472 <__fp_splitA+0x30>
    1462:	16 16       	cp	r1, r22
    1464:	17 06       	cpc	r1, r23
    1466:	18 06       	cpc	r1, r24
    1468:	99 1f       	adc	r25, r25
    146a:	f1 cf       	rjmp	.-30     	; 0x144e <__fp_splitA+0xc>
    146c:	86 95       	lsr	r24
    146e:	71 05       	cpc	r23, r1
    1470:	61 05       	cpc	r22, r1
    1472:	08 94       	sec
    1474:	08 95       	ret

00001476 <__fp_zero>:
    1476:	e8 94       	clt

00001478 <__fp_szero>:
    1478:	bb 27       	eor	r27, r27
    147a:	66 27       	eor	r22, r22
    147c:	77 27       	eor	r23, r23
    147e:	cb 01       	movw	r24, r22
    1480:	97 f9       	bld	r25, 7
    1482:	08 95       	ret

00001484 <__mulsf3>:
    1484:	0b d0       	rcall	.+22     	; 0x149c <__mulsf3x>
    1486:	c4 cf       	rjmp	.-120    	; 0x1410 <__fp_round>
    1488:	b5 df       	rcall	.-150    	; 0x13f4 <__fp_pscA>
    148a:	28 f0       	brcs	.+10     	; 0x1496 <__mulsf3+0x12>
    148c:	ba df       	rcall	.-140    	; 0x1402 <__fp_pscB>
    148e:	18 f0       	brcs	.+6      	; 0x1496 <__mulsf3+0x12>
    1490:	95 23       	and	r25, r21
    1492:	09 f0       	breq	.+2      	; 0x1496 <__mulsf3+0x12>
    1494:	a6 cf       	rjmp	.-180    	; 0x13e2 <__fp_inf>
    1496:	ab cf       	rjmp	.-170    	; 0x13ee <__fp_nan>
    1498:	11 24       	eor	r1, r1
    149a:	ee cf       	rjmp	.-36     	; 0x1478 <__fp_szero>

0000149c <__mulsf3x>:
    149c:	ca df       	rcall	.-108    	; 0x1432 <__fp_split3>
    149e:	a0 f3       	brcs	.-24     	; 0x1488 <__mulsf3+0x4>

000014a0 <__mulsf3_pse>:
    14a0:	95 9f       	mul	r25, r21
    14a2:	d1 f3       	breq	.-12     	; 0x1498 <__mulsf3+0x14>
    14a4:	95 0f       	add	r25, r21
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	55 1f       	adc	r21, r21
    14aa:	62 9f       	mul	r22, r18
    14ac:	f0 01       	movw	r30, r0
    14ae:	72 9f       	mul	r23, r18
    14b0:	bb 27       	eor	r27, r27
    14b2:	f0 0d       	add	r31, r0
    14b4:	b1 1d       	adc	r27, r1
    14b6:	63 9f       	mul	r22, r19
    14b8:	aa 27       	eor	r26, r26
    14ba:	f0 0d       	add	r31, r0
    14bc:	b1 1d       	adc	r27, r1
    14be:	aa 1f       	adc	r26, r26
    14c0:	64 9f       	mul	r22, r20
    14c2:	66 27       	eor	r22, r22
    14c4:	b0 0d       	add	r27, r0
    14c6:	a1 1d       	adc	r26, r1
    14c8:	66 1f       	adc	r22, r22
    14ca:	82 9f       	mul	r24, r18
    14cc:	22 27       	eor	r18, r18
    14ce:	b0 0d       	add	r27, r0
    14d0:	a1 1d       	adc	r26, r1
    14d2:	62 1f       	adc	r22, r18
    14d4:	73 9f       	mul	r23, r19
    14d6:	b0 0d       	add	r27, r0
    14d8:	a1 1d       	adc	r26, r1
    14da:	62 1f       	adc	r22, r18
    14dc:	83 9f       	mul	r24, r19
    14de:	a0 0d       	add	r26, r0
    14e0:	61 1d       	adc	r22, r1
    14e2:	22 1f       	adc	r18, r18
    14e4:	74 9f       	mul	r23, r20
    14e6:	33 27       	eor	r19, r19
    14e8:	a0 0d       	add	r26, r0
    14ea:	61 1d       	adc	r22, r1
    14ec:	23 1f       	adc	r18, r19
    14ee:	84 9f       	mul	r24, r20
    14f0:	60 0d       	add	r22, r0
    14f2:	21 1d       	adc	r18, r1
    14f4:	82 2f       	mov	r24, r18
    14f6:	76 2f       	mov	r23, r22
    14f8:	6a 2f       	mov	r22, r26
    14fa:	11 24       	eor	r1, r1
    14fc:	9f 57       	subi	r25, 0x7F	; 127
    14fe:	50 40       	sbci	r21, 0x00	; 0
    1500:	8a f0       	brmi	.+34     	; 0x1524 <__mulsf3_pse+0x84>
    1502:	e1 f0       	breq	.+56     	; 0x153c <__mulsf3_pse+0x9c>
    1504:	88 23       	and	r24, r24
    1506:	4a f0       	brmi	.+18     	; 0x151a <__mulsf3_pse+0x7a>
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	bb 1f       	adc	r27, r27
    150e:	66 1f       	adc	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	91 50       	subi	r25, 0x01	; 1
    1516:	50 40       	sbci	r21, 0x00	; 0
    1518:	a9 f7       	brne	.-22     	; 0x1504 <__mulsf3_pse+0x64>
    151a:	9e 3f       	cpi	r25, 0xFE	; 254
    151c:	51 05       	cpc	r21, r1
    151e:	70 f0       	brcs	.+28     	; 0x153c <__mulsf3_pse+0x9c>
    1520:	60 cf       	rjmp	.-320    	; 0x13e2 <__fp_inf>
    1522:	aa cf       	rjmp	.-172    	; 0x1478 <__fp_szero>
    1524:	5f 3f       	cpi	r21, 0xFF	; 255
    1526:	ec f3       	brlt	.-6      	; 0x1522 <__mulsf3_pse+0x82>
    1528:	98 3e       	cpi	r25, 0xE8	; 232
    152a:	dc f3       	brlt	.-10     	; 0x1522 <__mulsf3_pse+0x82>
    152c:	86 95       	lsr	r24
    152e:	77 95       	ror	r23
    1530:	67 95       	ror	r22
    1532:	b7 95       	ror	r27
    1534:	f7 95       	ror	r31
    1536:	e7 95       	ror	r30
    1538:	9f 5f       	subi	r25, 0xFF	; 255
    153a:	c1 f7       	brne	.-16     	; 0x152c <__mulsf3_pse+0x8c>
    153c:	fe 2b       	or	r31, r30
    153e:	88 0f       	add	r24, r24
    1540:	91 1d       	adc	r25, r1
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	97 f9       	bld	r25, 7
    1548:	08 95       	ret

0000154a <_exit>:
    154a:	f8 94       	cli

0000154c <__stop_program>:
    154c:	ff cf       	rjmp	.-2      	; 0x154c <__stop_program>
